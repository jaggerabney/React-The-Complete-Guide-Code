{"version":3,"file":"static/js/857.518d8343.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__gbE39\"};","import classes from './HighlightedQuote.module.css';\r\n\r\nconst HighlightedQuote = (props) => {\r\n  return (\r\n    <figure className={classes.quote}>\r\n      <p>{props.text}</p>\r\n      <figcaption>{props.author}</figcaption>\r\n    </figure>\r\n  );\r\n};\r\n\r\nexport default HighlightedQuote;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__cdXm+\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__p2xAY\",\"loading\":\"NewCommentForm_loading__xCXEP\",\"control\":\"NewCommentForm_control__Fi1qF\",\"actions\":\"NewCommentForm_actions__Auu+V\"};","import { useRef, useEffect } from \"react\";\r\nimport { addComment } from \"../../lib/api\";\r\nimport useHttp from \"../../hooks/use-http\";\r\n\r\nimport classes from \"./NewCommentForm.module.css\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nconst NewCommentForm = (props) => {\r\n  const commentTextRef = useRef();\r\n  const { sendRequest, status, error } = useHttp(addComment);\r\n  const { onAddedComment } = props;\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\" && !error) {\r\n      onAddedComment();\r\n    }\r\n  }, [status, error, onAddedComment]);\r\n\r\n  const submitFormHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    // optional: Could validate here\r\n    const enteredText = commentTextRef.current.value;\r\n\r\n    // send comment to server\r\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={submitFormHandler}>\r\n      {status === \"pending\" && (\r\n        <div className=\"centered\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      <div className={classes.control} onSubmit={submitFormHandler}>\r\n        <label htmlFor=\"comment\">Your Comment</label>\r\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button className=\"btn\">Add Comment</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewCommentForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__p1WEJ\"};","import classes from './CommentItem.module.css';\r\n\r\nconst CommentItem = (props) => {\r\n  return (\r\n    <li className={classes.item}>\r\n      <p>{props.text}</p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default CommentItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__3muEa\"};","import CommentItem from './CommentItem';\r\nimport classes from './CommentsList.module.css';\r\n\r\nconst CommentsList = (props) => {\r\n  return (\r\n    <ul className={classes.comments}>\r\n      {props.comments.map((comment) => (\r\n        <CommentItem key={comment.id} text={comment.text} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CommentsList;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getAllComments } from \"../../lib/api\";\r\nimport useHttp from \"../../hooks/use-http\";\r\n\r\nimport classes from \"./Comments.module.css\";\r\nimport NewCommentForm from \"./NewCommentForm\";\r\nimport CommentsList from \"./CommentsList\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nconst Comments = () => {\r\n  const [isAddingComment, setIsAddingComment] = useState(false);\r\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\r\n  const { quoteId } = useParams();\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  const startAddCommentHandler = () => {\r\n    setIsAddingComment(true);\r\n  };\r\n\r\n  const addedCommentHandler = useCallback(() => {\r\n    sendRequest(quoteId);\r\n    setIsAddingComment(false);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  let comments;\r\n\r\n  if (status === \"pending\") {\r\n    comments = (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\r\n    comments = <CommentsList comments={loadedComments} />;\r\n  }\r\n\r\n  if (status === \"completed\" && loadedComments && loadedComments.length === 0) {\r\n    comments = <p className=\"centered\">No comments yet!</p>;\r\n  }\r\n\r\n  return (\r\n    <section className={classes.comments}>\r\n      <h2>User Comments</h2>\r\n      {!isAddingComment && (\r\n        <button className=\"btn\" onClick={startAddCommentHandler}>\r\n          Add a Comment\r\n        </button>\r\n      )}\r\n      {isAddingComment && (\r\n        <NewCommentForm\r\n          quoteId={quoteId}\r\n          onAddedComment={addedCommentHandler}\r\n        />\r\n      )}\r\n      {comments}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n","import { useEffect } from \"react\";\r\nimport { Route, Link, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport useHttp from \"../hooks/use-http\";\r\n\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport Comments from \"../components/comments/Comments\";\r\n\r\nfunction QuoteDetail(props) {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n  const { quoteId } = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default QuoteDetail;\r\n"],"names":["props","className","classes","text","author","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","useParams","addedCommentHandler","useCallback","length","onClick","getSingleQuote","loadedQuote","match","useRouteMatch","path","exact","to","url"],"sourceRoot":""}